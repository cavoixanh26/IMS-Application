// <auto-generated />
using System;
using IMS.Infrastructure.EnityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMS.Infrastructure.Migrations
{
    [DbContext(typeof(IMSDbContext))]
    [Migration("20240111100132_add property IsTeamLeader")]
    partial class addpropertyIsTeamLeader
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IMS.Domain.Contents.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("SettingId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Se1644-DotNet",
                            SettingId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Se1644-DotNet",
                            SettingId = 1,
                            SubjectId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Se1644-DotNet",
                            SettingId = 1,
                            SubjectId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Se1644-DotNet",
                            SettingId = 1,
                            SubjectId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Se1644-DotNet",
                            SettingId = 1,
                            SubjectId = 5
                        });
                });

            modelBuilder.Entity("IMS.Domain.Contents.ClassStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassStudents");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int?>("IssueSettingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MilestoneId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("IssueSettingId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("IMS.Domain.Contents.IssueSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("IssueSettings");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Milestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IMS.Domain.Contents.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamleader")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "ki mua dong 2023",
                            Name = "FAll23",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "ki mua xuan 2024",
                            Name = "SP24",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "normal email",
                            Name = "@gmail.com",
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "fpt education",
                            Name = "@fpt.edu.vn",
                            Type = 2
                        });
                });

            modelBuilder.Entity("IMS.Domain.Contents.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "SW Architecture and Design",
                            Name = "SWD392"
                        },
                        new
                        {
                            Id = 2,
                            Description = "C# Programming and Unity",
                            Name = "PRU211m"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Mobile Programming",
                            Name = "PRM392"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Experiential Entrepreneurship 1",
                            Name = "EXE101"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Advanced Cross-Platform Application Programming With .NET",
                            Name = "PRN221"
                        });
                });

            modelBuilder.Entity("IMS.Domain.Contents.SubjectUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("SubjectUsers");
                });

            modelBuilder.Entity("IMS.Domain.Systems.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cac43a6e-f7bb-4448-baaf-1add431ccbbf"),
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("cbc43a8e-f7bb-4445-baaf-1add431ffbbf"),
                            Description = "Admin role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("IMS.Domain.Systems.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fab894a8-f218-45a3-800c-1daf8339399d",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "System",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMtGxszBrLSD6/aPzee/GhDbWKC3vkG7n7TcSqvmtwYPw3j6lrPqu+gpcH1HKVIL+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f409dc85-d918-418b-88ff-a36aee12a8a9",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9e224968-33e4-4652-b7b7-8574d048cdb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f33fc516-86c5-42b2-b929-d5eb73d26074",
                            Email = "user@gmail.com",
                            EmailConfirmed = true,
                            FullName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPENz+ug2pnvTCytiRiUa0jh4Hwn5Rn2H4JkB9hq3ceyRiAQ8zYodtiCvUevkTQyiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9879e338-335c-4540-bf34-151db6c8af1f",
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("c9b3a09b-11bc-4d40-96dc-4f6363a72d65"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "878846d8-85b5-4223-bc87-f29351663109",
                            Email = "brett@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Brett Bergnaum",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRETT@GMAIL.COM",
                            NormalizedUserName = "BRETT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPypDalZcMie5VvJBASM8LSw7oa5gXOvMvF9rCZV8NPsCcdRgE2PG/7/Ezd53OHtDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92624060-0474-4fae-b322-f44ff4e12ac9",
                            TwoFactorEnabled = false,
                            UserName = "brett@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("13fc1ce7-de4e-4d36-addc-606457d4c2c9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e5bf2ed-5439-4ea7-8615-1eb2d3aa74f4",
                            Email = "emma@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Emma Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMA@GMAIL.COM",
                            NormalizedUserName = "EMMA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELR2IVkPwG6HZ4geFxwUAwF9bZw31DP+xOh2Jq9eznTkLVcIligYc6Xuc6iWD6nMug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7236879-886d-43a8-bc3d-f2910cdb55a8",
                            TwoFactorEnabled = false,
                            UserName = "emma@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("19c9bb82-146b-45e7-a6b3-1a6c08a45325"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "134dc44e-6722-4f60-83e2-ea2b18aad7c8",
                            Email = "james@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "James Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES@YAHOO.COM",
                            NormalizedUserName = "JAMES@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHf6DkFbruan1pfA8iIjLgCRzYSuGDRBA35yXLE84iYTizeb5LY+Opm41ciFZZPFbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b17005cc-75fb-4e1f-b1e9-dd178870b6a5",
                            TwoFactorEnabled = false,
                            UserName = "james@yahoo.com"
                        },
                        new
                        {
                            Id = new Guid("e08f9a9f-971f-436a-8fd4-68c46a3af06d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f37fc63c-505d-4027-863f-b3cbe98bce67",
                            Email = "sarah@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Sarah Williams",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH@HOTMAIL.COM",
                            NormalizedUserName = "SARAH@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI21XMI37fNh3J32toS1FuNcKkN4Lc3yhfb6m5kXcgEU46K85Vs7wvqDzqQYudBugw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "baa3278b-78ed-4c22-aae0-f70ed3ea226c",
                            TwoFactorEnabled = false,
                            UserName = "sarah@hotmail.com"
                        },
                        new
                        {
                            Id = new Guid("b3b745a5-8ddc-4a2c-8be0-d6c4a81381e4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f68c31ae-2b85-4e1c-8b3a-2ac115992580",
                            Email = "david@outlook.com",
                            EmailConfirmed = true,
                            FullName = "David Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID@OUTLOOK.COM",
                            NormalizedUserName = "DAVID@OUTLOOK.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKPKhtQ0pJQywKijfs8zv4RdYs80ZHsZRfkniyDnWSUox082bkLpZJyZBGtWr0n1Aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85be9a73-8729-4831-8298-ef47f2d3b4d4",
                            TwoFactorEnabled = false,
                            UserName = "david@outlook.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            RoleId = new Guid("cbc43a8e-f7bb-4445-baaf-1add431ffbbf")
                        },
                        new
                        {
                            UserId = new Guid("9e224968-33e4-4652-b7b7-8574d048cdb9"),
                            RoleId = new Guid("cac43a6e-f7bb-4448-baaf-1add431ccbbf")
                        },
                        new
                        {
                            UserId = new Guid("c9b3a09b-11bc-4d40-96dc-4f6363a72d65"),
                            RoleId = new Guid("cac43a6e-f7bb-4448-baaf-1add431ccbbf")
                        },
                        new
                        {
                            UserId = new Guid("13fc1ce7-de4e-4d36-addc-606457d4c2c9"),
                            RoleId = new Guid("cac43a6e-f7bb-4448-baaf-1add431ccbbf")
                        },
                        new
                        {
                            UserId = new Guid("19c9bb82-146b-45e7-a6b3-1a6c08a45325"),
                            RoleId = new Guid("cac43a6e-f7bb-4448-baaf-1add431ccbbf")
                        },
                        new
                        {
                            UserId = new Guid("e08f9a9f-971f-436a-8fd4-68c46a3af06d"),
                            RoleId = new Guid("cac43a6e-f7bb-4448-baaf-1add431ccbbf")
                        },
                        new
                        {
                            UserId = new Guid("b3b745a5-8ddc-4a2c-8be0-d6c4a81381e4"),
                            RoleId = new Guid("cac43a6e-f7bb-4448-baaf-1add431ccbbf")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IMS.Domain.Contents.Assignment", b =>
                {
                    b.HasOne("IMS.Domain.Contents.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Class", b =>
                {
                    b.HasOne("IMS.Domain.Systems.AppUser", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("IMS.Domain.Contents.Setting", "Setting")
                        .WithMany("Classes")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Contents.Subject", "Subject")
                        .WithMany("Classes")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Setting");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("IMS.Domain.Contents.ClassStudent", b =>
                {
                    b.HasOne("IMS.Domain.Contents.Class", "Class")
                        .WithMany("ClassStudents")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Systems.AppUser", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Issue", b =>
                {
                    b.HasOne("IMS.Domain.Systems.AppUser", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("IMS.Domain.Contents.IssueSetting", "IssueSetting")
                        .WithMany("Issues")
                        .HasForeignKey("IssueSettingId");

                    b.HasOne("IMS.Domain.Contents.Milestone", "Milestone")
                        .WithMany("Issues")
                        .HasForeignKey("MilestoneId");

                    b.HasOne("IMS.Domain.Contents.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Assignee");

                    b.Navigation("IssueSetting");

                    b.Navigation("Milestone");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("IMS.Domain.Contents.IssueSetting", b =>
                {
                    b.HasOne("IMS.Domain.Contents.Class", "Class")
                        .WithMany("IssueSettings")
                        .HasForeignKey("ClassId");

                    b.HasOne("IMS.Domain.Contents.Project", "Project")
                        .WithMany("IssueSettings")
                        .HasForeignKey("ProjectId");

                    b.HasOne("IMS.Domain.Contents.Subject", "Subject")
                        .WithMany("IssueSettings")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Class");

                    b.Navigation("Project");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Milestone", b =>
                {
                    b.HasOne("IMS.Domain.Contents.Class", "Class")
                        .WithMany("Milestones")
                        .HasForeignKey("ClassId");

                    b.HasOne("IMS.Domain.Contents.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Class");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Project", b =>
                {
                    b.HasOne("IMS.Domain.Contents.Class", "Class")
                        .WithMany("Projects")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("IMS.Domain.Contents.ProjectMember", b =>
                {
                    b.HasOne("IMS.Domain.Contents.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Systems.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Subject", b =>
                {
                    b.HasOne("IMS.Domain.Systems.AppUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("IMS.Domain.Contents.SubjectUser", b =>
                {
                    b.HasOne("IMS.Domain.Contents.Subject", "Subject")
                        .WithMany("SubjectUsers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Systems.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("IMS.Domain.Systems.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("IMS.Domain.Systems.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("IMS.Domain.Systems.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("IMS.Domain.Systems.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Systems.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("IMS.Domain.Systems.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IMS.Domain.Contents.Class", b =>
                {
                    b.Navigation("ClassStudents");

                    b.Navigation("IssueSettings");

                    b.Navigation("Milestones");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("IMS.Domain.Contents.IssueSetting", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Milestone", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Project", b =>
                {
                    b.Navigation("IssueSettings");

                    b.Navigation("Issues");

                    b.Navigation("Milestones");

                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Setting", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("IMS.Domain.Contents.Subject", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("IssueSettings");

                    b.Navigation("SubjectUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
